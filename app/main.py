# app/main.py

from fastapi import FastAPI, File, UploadFile, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.templating import Jinja2Templates

from app.predictor import predict_image
from app.llm_recommender_vertex import generate_recipes

app = FastAPI()
templates = Jinja2Templates(directory="app/templates")

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    # Render the upload page with no predictions yet
    return templates.TemplateResponse("upload.html", {"request": request})

@app.post("/predict")
async def predict(request: Request, file: UploadFile = File(...)):
    # Read the uploaded image and run YOLO detection
    contents = await file.read()
    predictions = predict_image(contents)  # e.g. ["Tomato", "Lettuce", "Onion"]

    # Re-render the same template, passing in the detected ingredients
    return templates.TemplateResponse("upload.html", {
        "request": request,
        "predictions": predictions
    })

@app.post("/recommend")
async def recommend(ingredients: list[str]):
    """
    Expects a JSON array of ingredient names.
    Returns a JSON object of recipes generated by Vertex AI.
    """
    recipes = generate_recipes(ingredients)
    return JSONResponse(content=recipes)
