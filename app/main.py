from typing import List
from fastapi import FastAPI, File, UploadFile, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates




from app.predictor import predict_image
from app.llm_recommender_vertex import generate_recipes

app = FastAPI()

app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("upload.html", {"request": request})


@app.post("/predict")
async def predict(request: Request, files: List[UploadFile] = File(...)):
    top_predictions = []
    print(request)

    for file in files:
        contents = await file.read()
        predictions = predict_image(contents)

        if predictions:
            # Select the one with the highest confidence
            top_prediction = max(predictions, key=lambda x: x[1])
            top_predictions.append(top_prediction)

    return templates.TemplateResponse("upload.html", {
        "request": request,
        "predictions": top_predictions
    })
@app.post("/recommend")
async def recommend(ingredients: list[str]):
    """
    Expects a JSON array of ingredient names.
    Returns a JSON object of recipes generated by Vertex AI.
    """
    recipes = generate_recipes(ingredients)
    return JSONResponse(content=recipes)

